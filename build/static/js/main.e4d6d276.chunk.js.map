{"version":3,"sources":["images/bg.png","components/Signup.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","__webpack_require__","p","validationSchema","yup","email","required","password","min","theme","createTheme","palette","primary","light","main","dark","contrastText","secondary","Signup","formik","useFormik","initialValues","onSubmit","values","alert","JSON","stringify","react_default","a","createElement","ThemeProvider","Grid","container","component","sx","height","CssBaseline","item","xs","sm","md","backgroundImage","concat","bg","backgroundRepeat","backgroundColor","t","mode","grey","backgroundSize","backgroundPosition","Paper","elevation","square","Box","my","mx","display","flexDirection","alignItems","Typography","variant","mt","handleSubmit","TextField","margin","fullWidth","id","label","name","autoComplete","autoFocus","value","onChange","handleChange","error","touched","Boolean","errors","helperText","type","FormControlLabel","control","Checkbox","color","Button","borderColor","mb","Link","href","App","className","components_Signup","reportWebVitals","onPerfEntry","Function","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.e4d6d276.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bg.00038b2e.png\";","import React from 'react'\nimport bg from '../images/bg.png';\nimport {Button,CssBaseline,TextField,\nFormControlLabel,Checkbox,Link,Paper,Grid,Typography,Box} from '@mui/material'\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport { useFormik } from 'formik'; \nimport *  as yup from 'yup';\n\nconst validationSchema = yup.object({\n  email: yup\n     .string('Enter your email')\n     .email('Enter a valid email')\n    .required('Email is required'),\n  password: yup\n    .string('Enter your password')\n    .min(8, 'Password should be of minimum 8 characters length')\n    .required('Password is required'),\n});\n\n\nconst theme = createTheme({\n  palette: {\n    primary: {\n      light: '#757ce8',\n      main: '#3f50b5',\n      dark: '#002884',\n      contrastText: '#fff',\n    },\n    secondary: {\n      light: '#ff7961',\n      main: '#f44336',\n      dark: '#ba000d',\n      contrastText: '#000',\n    },\n  },\n});\nfunction Signup() {\n  const formik = useFormik({\n    initialValues: {\n      email: 'foobar@example.com',\n      password: 'foobar',\n    },\n    validationSchema: validationSchema,\n    onSubmit: (values) => {\n      alert(JSON.stringify(values, null, 2));\n    },\n  });\n     return (\n        <ThemeProvider theme={theme}>\n      <Grid container component=\"main\" sx={{ height: '100vh' }}>\n        <CssBaseline />\n        <Grid\n          item\n          xs={false}\n          sm={4}\n          md={7}\n          sx={{\n            backgroundImage: `url(${bg})`,\n            backgroundRepeat: 'no-repeat',\n            backgroundColor: (t) =>\n              t.palette.mode === 'light' ? t.palette.grey[50] : t.palette.grey[900],\n            backgroundSize: 'cover',\n            backgroundPosition: 'center',\n          }}\n        />\n        <Grid item xs={12} sm={8} md={5} component={Paper} elevation={6} square>\n          <Box\n            sx={{\n              my: 8,\n              mx: 4,\n              display: 'flex',\n              flexDirection: 'column',\n              alignItems: 'center',\n            }}\n          >\n            \n            <Typography component=\"h1\" variant=\"h5\">\n              Sign Up\n            </Typography>\n            <Box component=\"form\"  sx={{ mt: 1 }}>\n              <form onSubmit={formik.handleSubmit}>\n              <TextField\n                margin=\"normal\"\n                required\n                fullWidth\n                id=\"username\"\n                label=\"User Name\"\n                name=\"userName\"\n                autoComplete=\"userName\"\n                autoFocus\n                \n              />\n                      \n              <TextField\n                margin=\"normal\"\n                required\n                fullWidth\n                id=\"email\"\n                label=\"Email Address\"\n                name=\"email\"\n                autoComplete=\"email\"\n                autoFocus\n                value={formik.values.email}\n                onChange={formik.handleChange}\n                error={formik.touched.email && Boolean(formik.errors.email)}\n                helperText={formik.touched.email && formik.errors.email}\n              />\n              <TextField\n                margin=\"normal\"\n                required\n                fullWidth\n                name=\"password\"\n                label=\"Password\"\n                type=\"password\"\n                id=\"password\"\n                autoComplete=\"current-password\"\n                value={formik.values.password}\n                onChange={formik.handleChange}\n                error={formik.touched.password && Boolean(formik.errors.password)}\n                helperText={formik.touched.password && formik.errors.password}\n              />\n              <FormControlLabel\n                control={<Checkbox value=\"remember\" color=\"primary\" />}\n                label=\"Remember me\"\n              />\n              <Button\n                type=\"submit\"\n                fullWidth\n                variant=\"contained\"\n                sx={{ color: 'black', backgroundColor: 'pink', borderColor: 'black',mt:3,mb:2 }}\n              >\n                Sign Up\n              </Button>\n              </form>\n            \n\n\n              <Grid container>\n                <Grid item xs>\n                  <Link href=\"#\" variant=\"body2\">\n                    Forgot password?\n                  </Link>\n                </Grid>\n                <Grid item>\n                  <Link href=\"#\" variant=\"body2\">\n                    {\"Don't have an account? Sign Up\"}\n                  </Link>\n                </Grid>\n              </Grid>\n              <Grid container>\n              <Grid item>\n                </Grid>\n              </Grid>\n            </Box>\n          </Box>\n        </Grid>\n      </Grid>\n    </ThemeProvider>\n  );\n  \n}\n\nexport default Signup","import React from 'react';\nimport './App.css';\nimport Signup from './components/Signup';\n\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      <Signup/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}